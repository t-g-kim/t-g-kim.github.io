<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lambda on 게을러지지마</title>
    <link>https://log.readme.website/@lambda/</link>
    <description>Recent content in lambda on 게을러지지마</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>tgkim</copyright>
    <lastBuildDate>Mon, 11 Mar 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://log.readme.website/@lambda/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AWS Lambda로 시작하는 서비스</title>
      <link>https://log.readme.website/book-aws-lambda%EB%A1%9C-%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94-%EC%84%9C%EB%B9%84%EC%8A%A4/</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://log.readme.website/book-aws-lambda%EB%A1%9C-%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94-%EC%84%9C%EB%B9%84%EC%8A%A4/</guid>
      <description>서버(Server) + 리스(Less)의 합성어라 간혹 &amp;lsquo;서버가 없다&amp;rsquo;라고 문자 그대로 이해할 수 있지만, 절대 그렇지 않다.
서버리스(Serverless)는 클라우드 컴퓨팅의 모델 중 하나로 개발자가 서버를 직접 관리할 필요가 없는 아키텍처를 의미한다.
하지만 서버리스는 동적으로 서버의 자원을 할당한다.
사용자가 없다면 자원을 할당하지 않고 대기하다 요청이 들어오면 그 때 자원을 할당해서 요청을 처리하고 다시 대기 상태로 들어가게 된다. 즉, 자원을 효율적으로 사용할 수 있는 것이다. 비용 또한 대기상태를 제외한 실제 사용 자원에 대해서만 청구되기 때문에 굉장히 경제적이며, 해당 서버는 클라우드 제공 기업에서 전적으로 관리하기 때문에 개발자는 스케일링, 업데이트, 백업, 보안 등 서버에 대해 일절 관리하거나 신경 쓸 필요가 없어 비즈니스 로직에 집중하여 개발을 할 수 있다.</description>
    </item>
    
  </channel>
</rss>
